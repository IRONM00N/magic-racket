---
# todo:
# - 2htdp/abstraction:
#   - functions: define-type, type-case
#   - for...: variable declarations

# ^(\s+)'(\d)': \{ name: ([^\s]+) \}

# $1'$2':
# $1  name: $3

# ('\d'):\n[\s-]*name:\s*([^\s]*)

# $1: { name: $2 }

name: Racket Student Language
# scopeName: source.racket-sl
scopeName: source.racket
firstLineMatch: '#lang htdp/[bia]sl\+?'

filetypes:
  - rkt

patterns:
  - include: '#expression'
  - name: keyword.other.racket
    match: '^#lang'

# the anchors key is removed before writing to the JSON file
anchors:
  - &extended (?x)
  - &valid_name_first_char >-
    [^(\#)\[\]{}",'`;\s]
  - &valid_name_other_chars >-
    [^()\[\]{}",'`;\s]
  - !concat &valid_name [*valid_name_first_char, *valid_name_other_chars, '*']
  - &end_boundary_lb (?<=$|[()\[\]{}\",'`;\s])
  - &end_boundary_la (?=$|[()\[\]{}\",'`;\s])
  - &begin_boundary_lb (?<=^|[()\[\]{}",'`;\s])
  - &digit_2 '[01]+'
  - &digit_8 '[0-7]+'
  - &digit_10 '\d+'
  - &digit_10* '\d*'
  - &digit_16 '[0-9a-fA-F]+'
  - &sign '[+-]?'
  - &req_sign '[+-]'
  - &hash '\#*'
  - &backslash '\/'
  - &dot '\.'
  - &exp_mark '[sldefSLDEF]'
  - &exp_mark_16 '[slSL]'
  - &inexact_special '(?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])'
  - &num_end >-
    (?=$|[()\[\]{}",'`;\s])

repository:
  expression:
    patterns:
      - include: '#comment'
      - include: '#not-atom'
      - include: '#atom'
      - include: '#quote'

  atom:
    patterns:
      - include: '#bool'
      - include: '#number'
      - include: '#string'
      - include: '#keyword'
      - include: '#character'
      - include: '#symbol'
      - include: '#signature'
      # - include: '#variable'

  not-atom:
    patterns:
      - include: '#vector'
      - include: '#hash'
      - include: '#prefab-struct'
      - include: '#list'
      - name: keyword.control.racket
        match: >-
          (?x) (?<=^|[()\[\]{}\",'`;\s])
            (?: \#[cC][iI] | \#[cC][sS])
          (?=\s)
      - name: support.function.racket
        match: >-
          (?x) (?<=^|[()\[\]{}\",'`;\s])
            (?: \#&)

  quote:
    patterns:
      - name: support.function.racket
        match: >-
          (?x) (?<=^|[()\[\]{}\",'`;\s])
          (?: ,@ | ' | ` | , | \#' | \#` | \#, | \#~ | \#,@)+
          (?=[()\[\]{}\",'`;\s] | \#[^%] | [^()\[\]{}",'`;\s] )

  symbol:
    patterns:
      - name: string.quoted.single.racket
        begin: >-
          (?x) (?<=^|[()\[\]{}",;\s]) (?: ` | ' )+(\|)
        beginCaptures:
          '1': { name: punctuation.verbatim.begin.racket }
        end: '\|'
        endCaptures:
          '0': { name: punctuation.verbatim.end.racket }
      - name: string.quoted.single.racket
        begin: >-
          (?x) (?<=^|[()\[\]{}",;\s]) (?: ` | ' )+
          (?: \#% | \\\  | [^\#()\[\]{}",'`;\s])
        end: "(?=[()\\[\\]{}\",'`;\\s])"
        patterns:
          - match: '\\ '
          - begin: '\|'
            beginCaptures:
              '0': { name: punctuation.verbatim.begin.racket }
            end: '\|'
            endCaptures:
              '0': { name: punctuation.verbatim.end.racket }

  format:
    patterns:
      - begin: !concat
          - &open_backet (?x) (?<=[(\[{]) \s*
          - (e?printf | format) \s*
          - (")
        beginCaptures:
          '1': { name: support.function.racket }
          '2': { name: string.quoted.double.racket }
        end: '"'
        endCaptures:
          '0': { name: string.quoted.double.racket }
        contentName: string.quoted.double.racket
        patterns:
          - include: '#format-string'
          - include: '#escape-char'

  builtin-functions:
    patterns:
      - include: '#format'
      - include: '#struct'
      - match: !concat
          - !concat [*extended, *end_boundary_lb]
          - (
          - >-
            : | signature | mixed | - | < | <= | > | >= | abs | acos | add1 | angle | asin | atan | ceiling | complex\? | conjugate | cos | cosh | 
            current-seconds | denominator | even\? | exact->inexact | exact\? | exp | expt | floor | gcd | imag-part | inexact->exact | inexact\? | 
            integer->char | integer-sqrt | integer\? | lcm | log | magnitude | make-polar | make-rectangular | max | min | modulo | negative\? | 
            number->string | number->string-digits | number\? | numerator | odd\? | positive\? | quotient | random | rational\? | real-part | real? | 
            remainder | round | sgn | sin | sinh | sqr | sqrt | sub1 | tan | zero\? | boolean->string | boolean=\? | boolean\? | false\? | not | 
            symbol->string | symbol=\? | symbol\? | append | assoc | assq | caaar | caadr | caar | cadar | cadddr | caddr | cadr | car | cdaar | cdadr | 
            cdar | cddar | cdddr | cddr | cdr | cons | cons\? | eighth | empty\? | fifth | first | for-each | fourth | length | list | list\* | list-ref |
            list\? | make-list | member | member\? | memq | memq\? | memv | null\? | range | remove | remove-all | rest | reverse | second | seventh |
            sixth | third | make-posn | posn-x | posn-y | posn\? | set-posn-x! | set-posn-y! | char->integer | char-alphabetic? | char-ci<=\? | 
            char-ci<\? | char-ci=\? | char-ci>=\? | char-ci>\? | char-downcase | char-lower-case\? | char-numeric\? | char-upcase | char-upper-case\? |
            char-whitespace\? | char<=\? | char<\? | char=\? | char>=\? | char>\? | char\? | explode | implode | int->string | list->string | 
            make-string | replicate | string | string->int | string->list | string->number | string->symbol | string-alphabetic\? | string-contains-ci\? |
            string-contains\? | string-copy | string-downcase | string-ith | string-length | string-lower-case? | string-numeric? | string-ref | 
            string-upcase | string-upper-case\? | string-whitespace\? | string\? | substring | image=\? | image\? | =~ | current-milliseconds | 
            eof-object\? | eq\? | equal\? | equal\~? | eqv\? | error | exit | force | gensym | identity | promise\? | sleep | struct\? | void |
            string-append | string-ci<=\? | string-ci<\? | string-ci=\? | string-ci>=\? | string-ci>\? | string<=\? | string<\? | string=\? |
            string>=\? | string>\? | posn | \* | \+ | \/ | = | andmap | apply | argmax | argmin | build-list | build-string | compose | filter |
            foldl | foldr | map | memf | ormap | procedure\? | quicksort | sort | display | newline | pretty-print | print | read | with-input-from-file |
            with-input-from-string | with-output-to-file | with-output-to-string | write | build-vector | list->vector | make-vector | vector | vector->list |
            vector-length | vector-ref | vector-set! | vector\? | box | box\? | set-box! | unbox | hash-copy | hash-count | hash-eq\? | hash-equal\? |
            hash-eqv\? | hash-for-each | hash-has-key\? | hash-map | hash-ref | hash-ref! | hash-remove | hash-remove! | hash-set | hash-set! | 
            hash-update | hash-update! | hash\? | make-hash | make-hasheq | make-hasheqv | make-immutable-hash | make-immutable-hasheq | 
            make-immutable-hasheqv | and | or
          - )
          - *end_boundary_la
        captures: &support_function
          '1': { name: support.function.racket }
      - match: !concat [*extended, *end_boundary_lb, (in-range | in-naturals), *end_boundary_la]
        captures: *support_function
      - match: !concat
          - !concat [*extended, *end_boundary_lb]
          - (check-expect | check-random | check-within | check-error | check-member-of | check-satisfied | check-range | check-range)
          - *end_boundary_la
        captures:
          *support_function
          # builtin-variables:
          #   patterns:
          #     - match: (?x) (?<=$|[()\[\]{}\",'`;\s]) () (?<=$|[()\[\]{}\",'`;\s])

  syntax:
    patterns:
      - include: '#define'
      - include: '#let'
      - include: '#lambda'
      - include: '#set-var'
      - include: '#control'
      - match: !concat [*open_backet, (local) \s+, *end_boundary_la]
        captures:
          # fix: better name?
          '1': { name: keyword.local.racket }
      - match: !concat [*open_backet, (begin|begin0) \s+, *end_boundary_la]
        captures:
          # fix: should this be control?
          '1': { name: keyword.begin.racket }
      - match: !concat [*open_backet, (time) \s+, *end_boundary_la]
        captures:
          '1': { name: keyword.time.racket }
      - match: !concat [*open_backet, (class) \s+, *end_boundary_la]
        captures:
          '1': { name: keyword.this.racket }
      - match: !concat [*open_backet, (this|this%) \s+, *end_boundary_la]
        captures:
          '1': { name: keyword.this.racket }
      - match: !concat [*open_backet, (send) \s+, *end_boundary_la]
        captures:
          '1': { name: keyword.send.racket }

      # todo: implement types properly
      - match: >-
          (?x) (?<=$|[()\[\]{}\",'`;\s]) (
            ListOf | ConsOf
          ) (?=$|[()\[\]{}\",'`;\s])
        captures:
          '1': { name: support.function.a.racket }

  control:
    patterns:
      - match: !concat
          - !concat [*extended, *end_boundary_lb]
          - (\#%require | require | local-require)
          - *end_boundary_la
        captures:
          '1': { name: keyword.control.require.racket }
      - match: !concat
          - !concat [*extended, *end_boundary_lb]
          - (\#%provide | provide)
          - *end_boundary_la
        captures:
          '1': { name: keyword.control.provide.racket }
      - match: !concat
          - !concat [*extended, *end_boundary_lb]
          - (cond | else | match | if | when | unless | case | choice)
          - *end_boundary_la
        captures:
          '1': { name: keyword.control.conditional.racket }
      # 2htdp/abstraction
      # fix: variable declaration
      - match: !concat
          - !concat [*extended, *end_boundary_lb]
          - >-
            (for\*?/list | for\*?/or | for\*?/and | for\*?/sum | 
            for\*?/product | for\*?/string)
          - *end_boundary_la
        captures:
          '1': { name: keyword.control.flow.racket }
          # racket
      - match: !concat
          - !concat [*extended, *end_boundary_lb]
          - >-
            (for\*? | for\*?/vector | for\*?/hash | for\*?/hasheq | 
            for\*?/hasheqv | for\*?/hashalw | for\*?/lists | for\*?/first | 
            for\*?/last | for\*?/foldr? | for\*?/foldr/derived | do)
          - *end_boundary_la
        captures:
          '1': { name: keyword.control.flow.racket }

  define:
    patterns:
      - include: '#define-func'
      - include: '#define-vals'
      - include: '#define-val'
      - include: '#define-struct'

  define-struct:
    patterns:
      - &define-struct
        begin: !concat
          - !concat &define-struct_prefix
            - !concat [*extended, '(?<=[(\[{]) \s*']
            - (define-struct) \s+
            - !concat [(, *valid_name, ) \s*]
          - (\()
        beginCaptures:
          '1': { name: storage.type.racket }
          '2': { name: entity.name.type.struct.racket }
          '3': { name: punctuation.section.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.end.racket }
        patterns:
          - include: '#define-struct-fields'
      - <<: *define-struct
        begin: !concat [*define-struct_prefix, '(\[)']
        end: '\]'
      - <<: *define-struct
        begin: !concat [*define-struct_prefix, '(\{)']
        end: '}'

  define-struct-fields:
    patterns:
      - include: '#keyword'
      - include: '#comment'
      - name: variable.other.member.racket
        match: *valid_name

  define-val:
    patterns:
      - match: !concat # todo: add more anchors
          - !concat &DEF_VAL_START [*extended, '(?<=[(\[{]) \s*']
          - &def '((?:define(?: (?: -for)?-syntax)?) | define\/(?:public|private|override|public-final))'
          - \s+
          - !concat [(, *valid_name, )]
        captures:
          '1': { name: storage.type.define.racket }
          '2': { name: entity.name.variable.racket }

  define-vals:
    patterns:
      - &define-vals
        begin: !concat
          - !concat &define_vals_prefix
            - *DEF_VAL_START
            - '(define-(?: values(?: -for-syntax)? | syntaxes)?) \s*'
          - (\()
        beginCaptures:
          '1': { name: storage.type.define-many.racket }
          '2': { name: punctuation.section.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.end.racket }
        patterns:
          - name: entity.name.variable.racket
            match: *valid_name
      - <<: *define-vals
        begin: !concat [*define_vals_prefix, '(\[)']
        end: '\]'
      - <<: *define-vals
        begin: !concat [*define_vals_prefix, '({)']
        end: '}'

  # this matching for let is very far from perfect, but there is no good way to
  # determine if parenthesis match one another. This will work best if different
  # types of parenthesis are used
  # fix: first line
  let:
    patterns:
      - &let
        begin: >-
          (?x) (?<=[(\[{]) \s*
          (let (\s+loop)? | let\* | letrec | shared) \s+
          (\()
        beginCaptures:
          '1': { name: storage.type.let.racket }
          '2': { name: keyword.control.flow.racket }
          '3': { name: punctuation.section.begin.LET.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.end.racket }
        patterns:
          - &let_expr
            begin: !concat # there has got to be a better way to do this
              - !concat &let_expr_prefix ['(?:^\s*)?']
              - !concat ['(\()\s*(', *valid_name, )\b]
            beginCaptures:
              '1': { name: punctuation.section.begin.let.racket }
              '2': { name: entity.name.variable.let.racket }
            end: '\)'
            endCaptures:
              '0': { name: punctuation.section.end.let.racket }
            patterns:
              - include: '#expression'
          - <<: *let_expr
            begin: !concat [*let_expr_prefix, '(\[)\s*(', *valid_name, )\b]
            end: '\]'
          - <<: *let_expr
            begin: !concat [*let_expr_prefix, '({)\s*(', *valid_name, )\b]
            end: '}'
      - <<: *let
        begin: >-
          (?x) (?<=[(\[{]) \s*
          (let | let\* | letrec | shared) \s+
          (\[)
        end: '\]'
      - <<: *let
        begin: >-
          (?x) (?<=[(\[{]) \s*
          (let | let\* | letrec | shared) \s+
          ({)
        end: '}'

  set-var:
    patterns:
      - match: !concat
          - !concat [*extended, '(?<=[(\[{]) \s*']
          - (set!) \s+
          - !concat ['(', *valid_name, ')']
        captures:
          '1': { name: keyword.set.racket }
          '2': { name: entity.name.variable.racket }

  define-func:
    patterns:
      - &define-func
        begin: !concat
          - !concat &define_func_prefix
            - !concat [*extended, '(?<=[(\[{]) \s*']
            - !concat [*def, '\s*']
            # - '(define (?: (?: -for)?-syntax)?) \s*'
          - (\()
        beginCaptures:
          '1': { name: storage.type.lambda.racket }
          '2': { name: punctuation.section.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.end.racket }
        patterns:
          - include: '#func-args'
      - <<: *define-func
        begin: !concat [*define_func_prefix, '(\[)']
        end: '\]'
      - <<: *define-func
        begin: !concat [*define_func_prefix, '({)']
        end: '}'

  func-args:
    patterns:
      - include: '#function-name'
      - include: '#dot'
      - include: '#comment'
      - include: '#args'

  function-name:
    patterns:
      - name: entity.name.function.racket
        begin: (?x) (?<=[(\[{]) \s* (\|)
        beginCaptures:
          '1': { name: punctuation.verbatim.begin.racket }
        end: '\|'
        endCaptures:
          '0': { name: punctuation.verbatim.end.racket }
        contentName: entity.name.function.racket
      - begin: >-
          (?x) (?<=[(\[{]) \s*
            (\#% | \\\  | [^\#()\[\]{}",'`;\s])
        beginCaptures:
          '1': { name: entity.name.function.racket }
        end: "(?=[()\\[\\]{}\",'`;\\s])"
        contentName: entity.name.function.racket
        patterns:
          - match: '\\ '
          - begin: '\|'
            beginCaptures:
              '0': { name: punctuation.verbatim.begin.racket }
            end: '\|'
            endCaptures:
              '0': { name: punctuation.verbatim.end.racket }

  lambda:
    patterns:
      - include: '#lambda-onearg'
      - include: '#lambda-args'

  lambda-onearg:
    - name: meta.lambda.onearg.racket
      match: >-
        (?x) (?<=[(\[{]) \s*
        (lambda | λ) \s+
        ([^(\#)\[\]{}",'`;\s][^()\[\]{}",'`;\s]*)
      captures:
        '1': { name: storage.type.lambda.racket }
        '2': { name: variable.parameter.racket }

  lambda-args:
    patterns:
      - &lambda-args
        name: meta.lambda.racket
        begin: >-
          (?x) (?<=[(\[{]) \s*
          (lambda | λ) \s+
          (\()
        beginCaptures:
          '1': { name: storage.type.lambda.racket }
          '2': { name: punctuation.section.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.end.racket }
        patterns:
          - include: '#args'
      - <<: *lambda-args
        begin: >-
          (?x) (?<=[(\[{]) \s*
          (lambda | λ) \s+
          (\[)
        end: '\]'
      - <<: *lambda-args
        begin: >-
          (?x) (?<=[(\[{]) \s*
          (lambda | λ) \s+
          ({)
        end: '}'

  args:
    patterns:
      - include: '#keyword'
      - include: '#comment'
      - include: '#default-args'
      - name: variable.parameter.racket
        match: *valid_name

  default-args:
    patterns:
      - &default-args
        begin: '\('
        beginCaptures:
          '0': { name: punctuation.section.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.end.racket }
        patterns:
          - include: '#default-args-content'
      - <<: *default-args
        begin: '\['
        end: '\]'
      - <<: *default-args
        begin: '{'
        end: '}'

  default-args-content:
    patterns:
      - include: '#comment'
      - include: '#argument'
      - include: '$base'

  argument:
    patterns:
      - begin: (?x) (?<=[(\[{]) \s* (\|)
        beginCaptures:
          '1': { name: punctuation.verbatim.begin.racket }
        end: '\|'
        endCaptures:
          '0': { name: punctuation.verbatim.end.racket }
        contentName: variable.parameter.racket
      - begin: >-
          (?x) (?<=[(\[{]) \s*
            (\#% | \\\  | [^\#()\[\]{}",'`;\s])
        beginCaptures:
          '1': { name: variable.parameter.racket }
        end: "(?=[()\\[\\]{}\",'`;\\s])"
        contentName: variable.parameter.racket
        patterns:
          - match: '\\ '
          - begin: '\|'
            beginCaptures:
              '0': { name: punctuation.verbatim.begin.racket }
            end: '\|'
            endCaptures:
              '0': { name: punctuation.verbatim.end.racket }

  struct:
    patterns:
      - &struct
        name: meta.struct.fields.racket
        begin: !concat
          - !concat &struct_prefix
            - !concat [*extended, '(?<=[(\[{]) \s*']
            - '(struct) \s+'
            - !concat ['(', *valid_name, ')']
            - !concat ['(?: \s+', *valid_name, ')? \s*']
          - '(\()'
        beginCaptures:
          '1': { name: storage.struct.racket }
          '2': { name: entity.name.type.struct.racket }
          '3': { name: punctuation.section.fields.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.fields.end.racket }
        patterns:
          - include: '#comment'
          - include: '#default-args-struct'
          - include: '#struct-field'
      - <<: *struct
        begin: !concat [*struct_prefix, '(\[)']
        end: '\]'
      - <<: *struct
        begin: !concat [*struct_prefix, '(\{)']
        end: '}'

  prefab-struct:
    patterns:
      - &prefab-struct
        name: meta.prefab-struct.racket
        begin: '#s\('
        beginCaptures:
          '0': { name: punctuation.section.prefab-struct.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.prefab-struct.end.racket }
        patterns:
          - include: '$base'
      - <<: *prefab-struct
        begin: '#s\['
        end: '\]'
      - <<: *prefab-struct
        begin: '#s{'
        end: '}'

  default-args-struct-content:
    patterns:
      - include: '#comment'
      - include: '#argument-struct'
      - include: '$base'

  default-args-struct:
    patterns:
      - &default_args
        begin: '\('
        beginCaptures:
          '0': { name: punctuation.section.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.end.racket }
        patterns:
          - include: '#default-args-struct-content'
      - <<: *default_args
        begin: '\['
        end: '\]'
      - <<: *default_args
        begin: '{'
        end: '}'

  argument-struct:
    patterns:
      - begin: (?x) (?<=[(\[{]) \s* (\|)
        beginCaptures:
          '1': { name: punctuation.verbatim.begin.racket }
        end: '\|'
        endCaptures:
          '0': { name: punctuation.verbatim.end.racket }
        contentName: variable.other.member.racket
      - begin: >-
          (?x) (?<=[(\[{]) \s*
            (\#% | \\\  | [^\#()\[\]{}",'`;\s])
        beginCaptures:
          '1': { name: variable.other.member.racket }
        end: "(?=[()\\[\\]{}\",'`;\\s])"
        contentName: variable.other.member.racket
        patterns:
          - match: '\\ '
          - begin: '\|'
            beginCaptures:
              '0': { name: punctuation.verbatim.begin.racket }
            end: '\|'
            endCaptures:
              '0': { name: punctuation.verbatim.end.racket }

  dot:
    patterns:
      - name: punctuation.accessor.racket
        match: (?x)  \. (?=$|[()\[\]{}",'`;\s])

  list:
    patterns:
      - &list
        name: meta.list.racket
        begin: '\('
        beginCaptures:
          '0': { name: punctuation.section.list.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.list.end.racket }
        patterns:
          - include: '#list-content'
      - <<: *list
        begin: '\['
        end: '\]'
      - <<: *list
        begin: '{'
        end: '}'

  list-content:
    patterns:
      - include: '#builtin-functions'
      - include: '#syntax'
      - include: '#dot'
      - include: $base

  hash:
    patterns:
      - &meta_hash
        name: meta.hash.racket
        begin: '(?x) \# hash(?: eq(?: v)?)? \('
        beginCaptures:
          '0': { name: punctuation.section.hash.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.hash.end.racket }
        patterns:
          - include: '#hash-content'
      - <<: *meta_hash
        begin: '(?x) \# hash(?: eq(?: v)?)? \['
        end: '\]'
      - <<: *meta_hash
        begin: '(?x) \# hash(?: eq(?: v)?)? {'
        end: '}'

  hash-content:
    patterns:
      - include: '#comment'
      - include: '#pairing'

  pairing:
    patterns:
      - &pairing
        name: meta.list.racket
        begin: '\('
        beginCaptures:
          '0': { name: punctuation.section.pair.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.pair.end.racket }
        patterns:
          - include: '#pair-content'
      - <<: *pairing
        begin: '\['
        end: '\]'
      - <<: *pairing
        begin: '{'
        end: '}'

  pair-content:
    patterns:
      - include: '#dot'
      - include: '#comment'
      - include: '#atom'

  vector:
    patterns:
      - &vector
        name: meta.vector.racket
        begin: '(?x) \# (?: fl | Fl | fx | Fx)? [0-9]* \('
        beginCaptures:
          '0': { name: punctuation.section.vector.begin.racket }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.section.vector.end.racket }
        patterns:
          - include: '$base'
      - <<: *vector
        begin: '(?x) \# (?: fl | Fl | fx | Fx)? [0-9]* \['
        end: '\]'
      - <<: *vector
        begin: '(?x) \# (?: fl | Fl | fx | Fx)? [0-9]* {'
        end: '}'

  binding:
    patterns:
      - begin: (?x) (?<=[(\[{]) \s* (\|)
        beginCaptures:
          '1': { name: punctuation.verbatim.begin.racket }
        end: '\|'
        endCaptures:
          '0': { name: punctuation.verbatim.end.racket }
        contentName: entity.name.constant
      - begin: >-
          (?x) (?<=[(\[{]) \s*
            (\#% | \\\  | [^\#()\[\]{}",'`;\s])
        beginCaptures:
          '1': { name: entity.name.constant }
        end: "(?=[()\\[\\]{}\",'`;\\s])"
        contentName: entity.name.constant
        patterns:
          - match: '\\ '
          - begin: '\|'
            beginCaptures:
              '0': { name: punctuation.verbatim.begin.racket }
            end: '\|'
            endCaptures:
              '0': { name: punctuation.verbatim.end.racket }

  number:
    patterns:
      - include: '#number-dec'
      - include: '#number-oct'
      - include: '#number-bin'
      - include: '#number-hex'

  # todo: add anchors?
  number-dec:
    patterns:
      - name: constant.numeric.racket
        match: !concat
          - *extended
          - *begin_boundary_lb
          - '(?: (?:\#[dD])?(?: \#[eEiI])? | (?: \#[eEiI])?(?: \#[dD])?)'
          - '(?: '
          # Complex numbers with @
          - !concat &num_dec_complex_at
            - '(?: '
            - !concat &num_dec_main_full
              - '(?: '
              - !concat &num_dec_main
                - '(?: '
                - !concat &num_dec_main_part
                  - '(?: '
                  - !concat &num_dec_1
                    - !concat &num_dec_begin_1 [!concat &num_begin_1 ['(?: ', *sign], *digit_10]
                    - !concat [*hash, *backslash, *digit_10]
                    - !concat &num_part_end [*hash, ') | ']
                  - !concat &num_dec_2 [*num_dec_begin_1, *dot, *digit_10, *num_part_end]
                  - !concat &num_dec_3 [*num_dec_begin_1, *hash, *dot, *num_part_end]
                  - !concat &num_dec_4 [*num_dec_begin_1, *hash, ')']
                  - ') '
                  - !concat &exp_dec ['(?: ', *exp_mark, *sign, *digit_10, ')?']
                - ') | '
              - !concat &sign_inexact_special [*req_sign, *inexact_special]
              - ')'
            - ' @ '
            - *num_dec_main_full
            - ') | '
          # Complex numbers
          - !concat &num_dec_complex
            - !concat ['(?: ', *num_dec_main_full, '?']
            - !concat [*req_sign, '(?: ', *num_dec_main, *inexact_special, ')', ' i ) | ']
          - !concat [*sign_inexact_special, ' | ']
          # Real numbers
          - !concat &num_dec_real
            - '(?: '
            - *num_dec_1
            - !concat [*num_begin_1, *digit_10*, *dot, *digit_10, *num_part_end]
            - *num_dec_3
            - *num_dec_4
            - ') '
            - *exp_dec
          - ')'
          - *num_end

  number-oct:
    patterns:
      - name: constant.numeric.octal.racket
        match: >-
          (?x)
            (?<=^|[()\[\]{}",'`;\s])
            (?: \#[oO](?: \#[eEiI])? | (?: \#[eEiI])?\#[oO])
            (?:
              # Complex numbers with @
              (?:
                (?:
                  (?:
                    (?:
                      (?: [+-]? [0-7]+ \#* \/ [0-7]+ \#*) |
                      (?: [+-]? [0-7]+ \. [0-7]+ \#*) |
                      (?: [+-]? [0-7]+ \#* \. \#*) |
                      (?: [+-]? [0-7]+ \#*)
                    ) (?: [sldefSLDEF] [+-]? [0-7]+)?
                  ) |
                  [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                ) @
                (?:
                  (?:
                    (?:
                      (?: [+-]? [0-7]+ \#* \/ [0-7]+ \#*) |
                      (?: [+-]? [0-7]+ \. [0-7]+ \#*) |
                      (?: [+-]? [0-7]+ \#* \. \#*) |
                      (?: [+-]? [0-7]+ \#*)
                    ) (?: [sldefSLDEF] [+-]? [0-7]+)?
                  ) |
                  [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                )
              ) |
              # Complex numbers
              (?:
                (?:
                  (?:
                    (?:
                      (?: [+-]? [0-7]+ \#* \/ [0-7]+ \#*) |
                      (?: [+-]? [0-7]+ \. [0-7]+ \#*) |
                      (?: [+-]? [0-7]+ \#* \. \#*) |
                      (?: [+-]? [0-7]+ \#*)
                    ) (?: [sldefSLDEF] [+-]? [0-7]+)?
                  ) |
                  [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                )? [+-]
                (?:
                  (?:
                    (?:
                      (?: [+-]? [0-7]+ \#* \/ [0-7]+ \#*) |
                      (?: [+-]? [0-7]+ \. [0-7]+ \#*) |
                      (?: [+-]? [0-7]+ \#* \. \#*) |
                      (?: [+-]? [0-7]+ \#*)
                    ) (?: [sldefSLDEF] [+-]? [0-7]+)?
                  ) |
                  (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f]) |
                ) i
              ) |
              [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f]) |
              # Real numbers
              (?:
                (?: [+-]? [0-7]+ \#* \/ [0-7]+ \#*) |
                (?: [+-]? [0-7]* \. [0-7]+ \#*) |
                (?: [+-]? [0-7]+ \#* \. \#*) |
                (?: [+-]? [0-7]+ \#*)
              ) (?: [sldefSLDEF] [+-]? [0-7]+)?
            ) (?=$|[()\[\]{}",'`;\s])

  number-bin:
    patterns:
      - name: constant.numeric.bin.racket
        match: >-
          (?x)
            (?<=^|[()\[\]{}",'`;\s])
            (?: \#[bB](?: \#[eEiI])? | (?: \#[eEiI])?\#[bB])
            (?:
              # Complex numbers with @
              (?:
                (?:
                  (?:
                    (?:
                      (?: [+-]? [01]+ \#* \/ [01]+ \#*) |
                      (?: [+-]? [01]+ \. [01]+ \#*) |
                      (?: [+-]? [01]+ \#* \. \#*) |
                      (?: [+-]? [01]+ \#*)
                    ) (?: [sldefSLDEF] [+-]? [01]+)?
                  ) |
                  [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                ) @
                (?:
                  (?:
                    (?:
                      (?: [+-]? [01]+ \#* \/ [01]+ \#*) |
                      (?: [+-]? [01]+ \. [01]+ \#*) |
                      (?: [+-]? [01]+ \#* \. \#*) |
                      (?: [+-]? [01]+ \#*)
                    ) (?: [sldefSLDEF] [+-]? [01]+)?
                  ) |
                  (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                )
              ) |
              # Complex numbers
              (?:
                (?:
                  (?:
                   (?:
                      (?: [+-]? [01]+ \#* \/ [01]+ \#*) |
                      (?: [+-]? [01]+ \. [01]+ \#*) |
                      (?: [+-]? [01]+ \#* \. \#*) |
                      (?: [+-]? [01]+ \#*)
                    ) (?: [sldefSLDEF] [+-]? [01]+)?
                  ) |
                  [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                )? [+-]
                (?:
                  (?:
                    (?:
                      (?: [+-]? [01]+ \#* \/ [01]+ \#*) |
                      (?: [+-]? [01]+ \. [01]+ \#*) |
                      (?: [+-]? [01]+ \#* \. \#*) |
                      (?: [+-]? [01]+ \#*)
                    ) (?: [sldefSLDEF] [+-]? [01]+)?
                  ) |
                  (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f]) |
                ) i
              ) |
              [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f]) |
              # Real numbers
              (?:
                (?: [+-]? [01]+ \#* \/ [01]+ \#*) |
                (?: [+-]? [01]* \. [01]+ \#*) |
                (?: [+-]? [01]+ \#* \. \#*) |
                (?: [+-]? [01]+ \#*)
              ) (?: [sldefSLDEF] [+-]? [01]+)?
            ) (?=$|[()\[\]{}",'`;\s])

  number-hex:
    patterns:
      - name: constant.numeric.hex.racket
        match: >-
          (?x)
            (?<=^|[()\[\]{}",'`;\s])
            (?: \#[xX](?: \#[eEiI])? | (?: \#[eEiI])?\#[xX])
            (?:
              # Complex numbers with @
              (?:
                (?:
                  (?:
                    (?:
                      (?: [+-]? [0-9a-fA-F]+ \#* \/ [0-9a-fA-F]+ \#*) |
                      (?: [+-]? [0-9a-fA-F] \. [0-9a-fA-F]+ \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \#* \. \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \#*)
                    ) (?: [slSL] [+-]? [0-9a-fA-F]+)?
                  ) |
                  [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                ) @
                (?:
                  (?:
                    (?:
                      (?: [+-]? [0-9a-fA-F]+ \#* \/ [0-9a-fA-F]+ \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \. [0-9a-fA-F]+ \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \#* \. \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \#*)
                    ) (?: [slSL] [+-]? [0-9a-fA-F]+)?
                  ) |
                  (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                )
              ) |
              # Complex numbers
              (?:
                (?:
                  (?:
                    (?:
                      (?: [+-]? [0-9a-fA-F]+ \#* \/ [0-9a-fA-F]+ \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \. [0-9a-fA-F]+ \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \#* \. \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \#*)
                    ) (?: [slSL] [+-]? [0-9a-fA-F]+)?
                  ) |
                  [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f])
                )? [+-]
                (?:
                  (?:
                    (?:
                      (?: [+-]? [0-9a-fA-F]+ \#* \/ [0-9a-fA-F]+ \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \. [0-9a-fA-F]+ \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \#* \. \#*) |
                      (?: [+-]? [0-9a-fA-F]+ \#*)
                    ) (?: [slSL] [+-]? [0-9a-fA-F]+)?
                  ) |
                  (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f]) |
                ) i
              ) |
              [+-] (?: (?: [iI][nN][fF])\.[0f] | (?: [nN][aA][nN])\.[0f]) |
              # Real numbers
              (?:
                (?: [+-]? [0-9a-fA-F]+ \#* \/ [0-9a-fA-F]+ \#*) |
                (?: [+-]? [0-9a-fA-F]* \. [0-9a-fA-F]+ \#*) |
                (?: [+-]? [0-9a-fA-F]+ \#* \. \#*) |
                (?: [+-]? [0-9a-fA-F]+ \#*)
              ) (?: [slSL] [+-]? [0-9a-fA-F]+)?
            ) (?=$|[()\[\]{}",'`;\s])

  comment:
    patterns:
      - include: '#comment-line'
      - include: '#comment-block'
      - include: '#comment-sexp'

  comment-line:
    patterns:
      - name: comment.line.unix.racket
        match: "(#!)[ \/].*$"
        beginCaptures:
          '1': { name: punctuation.definition.comment.racket }
      - name: comment.line.semicolon.racket
        match: (?x) (?<=^|[()\[\]{}",'`;\s]) (;) .* $
        captures:
          '1': { name: punctuation.definition.comment.racket }

  comment-sexp:
    patterns:
      - name: comment.sexp.racket
        match: "(?<=^|[()\\[\\]{}\",'`;\\s])#;"

  comment-block:
    patterns:
      - name: comment.block.racket
        begin: "#\\|"
        beginCaptures:
          '0': { name: punctuation.definition.comment.begin.racket }
        end: "\\|#"
        endCaptures:
          '0': { name: punctuation.definition.comment.end.racket }
        patterns:
          - include: '#comment-block'

  variable:
    patterns:
      - begin: (?x) (?<=^|[()\[\]{}",'`;\s]) (\|)
        beginCaptures:
          '1': { name: punctuation.verbatim.begin.racket }
        end: '\|'
        endCaptures:
          '0': { name: punctuation.verbatim.end.racket }
      - begin: >-
          (?x) (?<=^|[()\[\]{}",'`;\s])
          (?: \#% | \\\  | [^\#()\[\]{}",'`;\s])
        end: "(?=[()\\[\\]{}\",'`;\\s])"
        patterns:
          - match: '\\ '
          - begin: '\|'
            beginCaptures:
              '0': { name: punctuation.verbatim.begin.racket }
            end: '\|'
            endCaptures:
              '0': { name: punctuation.verbatim.end.racket }

  struct-field:
    patterns:
      - contentName: variable.other.member.racket
        begin: (?x) (?<=^|[()\[\]{}",'`;\s]) (\|)
        beginCaptures:
          '1': { name: punctuation.verbatim.begin.racket }
        end: '\|'
        endCaptures:
          '0': { name: punctuation.verbatim.end.racket }
      - contentName: variable.other.member.racket
        begin: >-
          (?x) (?<=^|[()\[\]{}",'`;\s])
          (\#% | \\\  | [^\#()\[\]{}",'`;\s])
        beginCaptures:
          '1': { name: variable.other.member.racket }
        end: "(?=[()\\[\\]{}\",'`;\\s])"
        patterns:
          - match: '\\ '
          - begin: '\|'
            beginCaptures:
              '0': { name: punctuation.verbatim.begin.racket }
            end: '\|'
            endCaptures:
              '0': { name: punctuation.verbatim.end.racket }

  keyword:
    patterns:
      - name: keyword.other.racket
        match: >-
          (?x) (?<=^|[()\[\]{}",'`;\s]) \#: [^()\[\]{}",'`;\s]+

  bool:
    patterns:
      - name: constant.language.racket
        match: >-
          (?x)
            (?<=^|[()\[\]{}",'`;\s]) \#
            (?: [tT](?: rue)?|[fF](?: alse)?)
            (?=[()\[\]{}",'`;\s])

  signature:
    patterns:
      - name: entity.name.type.racket
        match: >-
          (?x)
          (?<=^|[()\[\]{}",'`;\s])
          Any | Boolean | Boolean | Char | EmptyList | False | Integer | Natural | Number | Rational | Real | String | Symbol | True
          (?=[()\[\]{}",'`;\s])

  character:
    patterns:
      - name: constant.character.racket
        match: >-
          (?x) \#\\
            (?:
              (?: [0-7]{3}) |
              (?: u[0-9a-fA-F]{1,4}) |
              (?: U[0-9a-fA-F]{1,6}) |
              (?:
                (?:
                  null? | newline | linefeed | backspace | vtab | page |
                  return | space | rubout | (?: [^\w\s] | \d)
                )
                (?![a-zA-Z])
              ) |
              (?: [^\W\d](?=[\W\d]) | \W )
            )

  string:
    patterns:
      - include: '#byte-string'
      - include: '#regexp-byte-string'
      - include: '#regexp-string'
      - include: '#base-string'
      - include: '#here-string'

  here-string:
    patterns:
      - name: string.here.racket
        begin: '#<<(.*)$'
        end: "^\\1$"

  base-string:
    patterns:
      - name: string.quoted.double.racket
        begin: '"'
        beginCaptures:
          '0': { name: punctuation.definition.string.begin.racket }
        end: '"'
        endCaptures:
          '0': { name: punctuation.definition.string.end.racket }
        patterns:
          - include: '#escape-char'

  byte-string:
    patterns:
      - name: string.byte.racket
        begin: '#"'
        beginCaptures:
          '0': { name: punctuation.definition.string.begin.racket }
        end: '"'
        endCaptures:
          '0': { name: punctuation.definition.string.end.racket }
        patterns:
          - include: '#escape-char-base'

  regexp-string:
    patterns:
      - name: string.regexp.racket
        begin: '#(r|p)x"'
        beginCaptures:
          '0': { name: punctuation.definition.string.begin.racket }
        end: '"'
        endCaptures:
          '0': { name: punctuation.definition.string.end.racket }
        patterns:
          - include: '#escape-char-base'

  regexp-byte-string:
    patterns:
      - name: string.regexp.byte.racket
        begin: '#(r|p)x#"'
        beginCaptures:
          '0': { name: punctuation.definition.string.begin.racket }
        end: '"'
        endCaptures:
          '0': { name: punctuation.definition.string.end.racket }
        patterns:
          - include: '#escape-char-base'

  format-string:
    patterns:
      - name: constant.other.placeholder.racket
        match: >-
          (?x) ~
          (?:
            (?: \.?[n%aAsSvV]) |
            [cCbBoOxX~\s]
          )

  escape-char:
    patterns:
      - include: '#escape-char-base'
      - name: constant.character.escape.racket
        match: >-
          (?x) \\
            (?:
             (?: u[\da-fA-F]{1,4}) |
             (?: U[\da-fA-F]{1,8})
            )
      - include: '#escape-char-error'

  escape-char-base:
    patterns:
      - name: constant.character.escape.racket
        match: !concat
          - *extended
          - '\\'
          - '(?:'
          - !concat
            - "(?: [abtnvfre\"'\\\\]) |"
            - '(?: [0-7]{1,3}) |'
            - '(?: x[\da-fA-F]{1,2})'
          - )

  escape-char-error:
    patterns:
      - name: invalid.illegal.escape.racket
        match: '\\.'
